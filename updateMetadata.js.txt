// updateMetadata.js
const { Metaplex, keypairIdentity, bundlrStorage } = require('@metaplex-foundation/js');
const { Connection, clusterApiUrl, Keypair } = require('@solana/web3.js');
const fs = require('fs');

// Replace with the path to your wallet JSON file (your secret key)
const secretKeyString = fs.readFileSync(C:\Users\shorg\.config\solana\id.json, 'utf8');
const secretKey = Uint8Array.from(JSON.parse(secretKeyString));
const wallet = Keypair.fromSecretKey(secretKey);

// Set up a connection (change 'devnet' to 'mainnet-beta' if needed)
const connection = new Connection(clusterApiUrl('devnet'));

// Initialize Metaplex instance
const metaplex = Metaplex.make(connection)
  .use(keypairIdentity(wallet))
  .use(bundlrStorage());

async function updateTokenMetadata() {
  try {
    // Replace with your token mint address
    const mintAddress = 5oKiBTTUutgk95g4MEgxUHtWJ9n21QXPSAusL6ic8KgM;

    // Fetch the current metadata for your token
    const tokenMetadata = await metaplex.nfts().findByMint({ mintAddress });

    // Update the metadata with a new name and symbol ("LIST" in this case)
    const updated = await metaplex.nfts().update({
      nftOrSft: tokenMetadata,
      name: Unburdened,  // Replace with your desired token name
      symbol: "LIST",          // This sets the symbol to LIST
      // You can update other fields as needed
    });
    console.log('Metadata updated successfully:', updated);
  } catch (error) {
    console.error('Error updating metadata:', error);
  }
}

updateTokenMetadata();
